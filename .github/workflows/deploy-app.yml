name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "The tag of the container image to deploy"
        required: true

jobs:
  deploy:
    name: Deploy Quarkus App to ECS
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Ensure Log Group Exists
        run: |
          LOG_GROUP_NAME="/ecs/elkproject"
          aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP_NAME --region us-east-1 || \
          aws logs create-log-group --log-group-name $LOG_GROUP_NAME --region us-east-1

      - name: Check if Task Definition Exists
        id: check-task
        run: |
          set +e
          aws ecs describe-task-definition --task-definition elkproject
          aws ecs describe-task-definition --task-definition elkproject > task-def.json 2>/dev/null
          if [ $? -eq 0 ]; then
            echo "TASK_DEFINITION_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TASK_DEFINITION_EXISTS=false" >> $GITHUB_ENV
          fi
          set -e

      - name: Create Task Definition if Not Exists
        if: env.TASK_DEFINITION_EXISTS == 'false'
        run: |
          cat <<EOF > task-def.json
          {
            "family": "elkproject",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "elkproject-container",
                "image": "${{ secrets.ECR_URI }}/elkproject:${{ github.event.inputs.image_tag }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "hostPort": 8080,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/elkproject",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

      - name: DEBUG Task Definition
        run: |
          echo "DEBUGGING"
          cat task-def.json 
          echo "END DEBUGGING

      - name: Register Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-def.json > register-task-output.json
          TASK_REVISION=$(jq -r '.taskDefinition.revision' register-task-output.json)
          echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

      - name: Create ECS Service if Not Exists
        if: env.TASK_DEFINITION_EXISTS == 'false'
        run: |
          aws ecs create-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service-name elkproject-service \
            --task-definition elkproject:$TASK_REVISION \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --launch-type FARGATE

      - name: Update ECS Service
        if: env.TASK_DEFINITION_EXISTS == 'true'
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service elkproject-service \
            --task-definition elkproject:$TASK_REVISION \
            --force-new-deployment
